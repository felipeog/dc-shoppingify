app wasp {
  wasp: {
    version: "^0.11.7"
  },
  title: "Shoppingify",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { devSeed } from "@server/dbSeeds.js",
    ]
  },
  dependencies: [
    ("@tailwindcss/forms", "^0.5.3")
  ]
}

/* ========================================
  start: entities 
======================================== */

entity User {=psl
  id          Int         @id @default(autoincrement())
  username    String      @unique
  password    String
  itemsLists  ItemsList[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
psl=}

entity ItemsList {=psl
  id        Int         @id @default(autoincrement())
  name      String      @default("Shopping list")
  listItems ListItem[]
  state     String      @default("ONGOING") // "ONGOING" | "COMPLETED" | "CANCELLED" https://github.com/wasp-lang/wasp/issues/641
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
psl=}

entity ListItem {=psl
  id          Int       @id @default(autoincrement())
  amount      Int       @default(1)
  isDone      Boolean   @default(false)
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      Int
  itemsList   ItemsList @relation(fields: [itemsListId], references: [id])
  itemsListId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
psl=}

entity Item {=psl
  id          Int         @id @default(autoincrement())
  name        String      @unique
  note        String?
  image       String?
  listItems   ListItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
psl=}

entity Category {=psl
  id        Int       @id @default(autoincrement())
  name      String    @unique
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
psl=}

/* ========================================
  end: entities
======================================== */

/* ========================================
  start: queries 
======================================== */

query getCategories {
  fn: import { getCategories } from "@server/queries.js",
  entities: [Category]
}

query getItems {
  fn: import { getItems } from "@server/queries.js",
  entities: [Item]
}

query getItemsLists {
  fn: import { getItemsLists } from "@server/queries.js",
  entities: [ItemsList]
}

query getListItems {
  fn: import { getListItems } from "@server/queries.js",
  entities: [ListItem]
}

/* ========================================
  end: queries
======================================== */

/* ========================================
  start: actions 
======================================== */

action createCategory {
  fn: import { createCategory } from "@server/actions/category/createCategory.js",
  entities: [Category]
}

action updateCategory {
  fn: import { updateCategory } from "@server/actions/category/updateCategory.js",
  entities: [Category]
}

action deleteCategory {
  fn: import { deleteCategory } from "@server/actions/category/deleteCategory.js",
  entities: [Category, Item]
}

action createItem {
  fn: import { createItem } from "@server/actions/item/createItem.js",
  entities: [Item]
}

action updateItem {
  fn: import { updateItem } from "@server/actions/item/updateItem.js",
  entities: [Item ]
}

action deleteItem {
  fn: import { deleteItem } from "@server/actions/item/deleteItem.js",
  entities: [Item, ListItem]
}

action createItemsList {
  fn: import { createItemsList } from "@server/actions/itemsList/createItemsList.js",
  entities: [ItemsList]
}

action updateItemsList {
  fn: import { updateItemsList } from "@server/actions/itemsList/updateItemsList.js",
  entities: [ItemsList]
}

action deleteItemsList {
  fn: import { deleteItemsList } from "@server/actions/itemsList/deleteItemsList.js",
  entities: [ItemsList]
}

action createListItem {
  fn: import { createListItem } from "@server/actions/listItem/createListItem.js",
  entities: [ListItem, ItemsList]
}

action updateListItem {
  fn: import { updateListItem } from "@server/actions/listItem/updateListItem.js",
  entities: [ListItem, ItemsList]
}

action deleteListItem {
  fn: import { deleteListItem } from "@server/actions/listItem/deleteListItem.js",
  entities: [ListItem, ItemsList]
}

/* ========================================
  end: actions
======================================== */

/* ========================================
  start: routes 
======================================== */

route RootRoute {
  path: "/",
  to: MainPage
}
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@client/MainPage.tsx"
}

route SignupRoute {
  path: "/signup",
  to: SignupPage
}
page SignupPage {
  component: import { SignupPage } from "@client/SignupPage.tsx"
}

route LoginRoute {
  path: "/login",
  to: LoginPage
}
page LoginPage {
  component: import { LoginPage } from "@client/LoginPage.tsx"
}

route DebugRoute {
  path: "/debug",
  to: DebugPage
}
page DebugPage {
  authRequired: true,
  component: import { DebugPage } from "@client/debug/DebugPage.tsx"
}

route DebugItemsListRoute {
  path: "/debug/items-list",
  to: DebugItemsListPage
}
page DebugItemsListPage {
  authRequired: true,
  component: import { DebugItemsListPage } from "@client/debug/DebugItemsListPage.tsx"
}

route DebugListItemRoute {
  path: "/debug/list-item",
  to: DebugListItemPage
}
page DebugListItemPage {
  authRequired: true,
  component: import { DebugListItemPage } from "@client/debug/DebugListItemPage.tsx"
}

route DebugItemRoute {
  path: "/debug/item",
  to: DebugItemPage
}
page DebugItemPage {
  authRequired: true,
  component: import { DebugItemPage } from "@client/debug/DebugItemPage.tsx"
}

route DebugCategoryRoute {
  path: "/debug/category",
  to: DebugCategoryPage
}
page DebugCategoryPage {
  authRequired: true,
  component: import { DebugCategoryPage } from "@client/debug/DebugCategoryPage.tsx"
}

/* ========================================
  end: routes
======================================== */
