/* ============================================================================
  CONFIGURATION
============================================================================ */

app wasp {
  wasp: {
    version: "^0.11.7"
  },
  title: "Shoppingify",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { development } from "@server/seeds/development.js",
    ]
  },
  dependencies: [
    ("@tailwindcss/forms", "^0.5.3"),
    ("clsx", "^2.0.0"),
    ("zod", "^3.22.4"),
    ("validator", "^13.11.0"),
    ("@types/validator", "^13.11.5"),
  ]
}

/* ============================================================================
  ENTITIES
============================================================================ */

entity User {=psl
  id          Int         @id @default(autoincrement())
  username    String      @unique
  password    String
  itemsLists  ItemsList[]
  listItems   ListItem[]
  items       Item[]
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
psl=}

entity ItemsList {=psl
  id        Int         @id @default(autoincrement())
  name      String      @default("Shopping list")
  listItems ListItem[]
  // "ONGOING" | "COMPLETED" | "CANCELLED" https://github.com/wasp-lang/wasp/issues/641
  state     String      @default("ONGOING")
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
psl=}

entity ListItem {=psl
  id          Int       @id @default(autoincrement())
  amount      Int       @default(1)
  isDone      Boolean   @default(false)
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      Int
  itemsList   ItemsList @relation(fields: [itemsListId], references: [id])
  itemsListId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([itemId, itemsListId, userId])
psl=}

entity Item {=psl
  id          Int         @id @default(autoincrement())
  name        String
  note        String?
  image       String?
  listItems   ListItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, userId])
psl=}

entity Category {=psl
  id        Int       @id @default(autoincrement())
  name      String
  items     Item[]
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, userId])
psl=}

/* ============================================================================
  QUERIES
============================================================================ */

/* ==============================================
  QUERIES: CATEGORY
============================================== */

query getCategories {
  fn: import { getCategories } from "@server/queries/category/getCategories.js",
  entities: [Category]
}

/* ==============================================
  QUERIES: ITEM
============================================== */

query getItems {
  fn: import { getItems } from "@server/queries/item/getItems.js",
  entities: [Item]
}

/* ==============================================
  QUERIES: ITEMSLIST
============================================== */

query getItemsLists {
  fn: import { getItemsLists } from "@server/queries/itemsList/getItemsLists.js",
  entities: [ItemsList]
}

/* ==============================================
  QUERIES: LISTITEM
============================================== */

query getListItems {
  fn: import { getListItems } from "@server/queries/listItem/getListItems.js",
  entities: [ListItem]
}

/* ============================================================================
  ACTIONS
============================================================================ */

/* ==============================================
  ACTIONS: CATEGORY
============================================== */

action createCategory {
  fn: import { createCategory } from "@server/actions/category/createCategory.js",
  entities: [Category]
}

action updateCategory {
  fn: import { updateCategory } from "@server/actions/category/updateCategory.js",
  entities: [Category]
}

action deleteCategory {
  fn: import { deleteCategory } from "@server/actions/category/deleteCategory.js",
  entities: [Category, Item]
}

/* ==============================================
  ACTIONS: ITEM
============================================== */

action createItem {
  fn: import { createItem } from "@server/actions/item/createItem.js",
  entities: [Item]
}

action updateItem {
  fn: import { updateItem } from "@server/actions/item/updateItem.js",
  entities: [Item ]
}

action deleteItem {
  fn: import { deleteItem } from "@server/actions/item/deleteItem.js",
  entities: [Item, ListItem]
}

/* ==============================================
  ACTIONS: ITEMSLIST
============================================== */

action createItemsList {
  fn: import { createItemsList } from "@server/actions/itemsList/createItemsList.js",
  entities: [ItemsList]
}

action updateItemsList {
  fn: import { updateItemsList } from "@server/actions/itemsList/updateItemsList.js",
  entities: [ItemsList]
}

action deleteItemsList {
  fn: import { deleteItemsList } from "@server/actions/itemsList/deleteItemsList.js",
  entities: [ItemsList, ListItem]
}

/* ==============================================
  ACTIONS: LISTITEM
============================================== */

action createListItem {
  fn: import { createListItem } from "@server/actions/listItem/createListItem.js",
  entities: [ListItem, Item, ItemsList]
}

action updateListItem {
  fn: import { updateListItem } from "@server/actions/listItem/updateListItem.js",
  entities: [ListItem, Item, ItemsList]
}

action deleteListItem {
  fn: import { deleteListItem } from "@server/actions/listItem/deleteListItem.js",
  entities: [ListItem]
}

/* ============================================================================
  ROUTES
============================================================================ */

/* ==============================================
  ROUTES: ROOT
============================================== */

route RootRoute {
  path: "/",
  to: MainPage
}
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@client/MainPage.tsx"
}

/* ==============================================
  ROUTES: AUTHENTICATION
============================================== */

route SignupRoute {
  path: "/signup",
  to: SignupPage
}
page SignupPage {
  component: import { SignupPage } from "@client/SignupPage.tsx"
}

route LoginRoute {
  path: "/login",
  to: LoginPage
}
page LoginPage {
  component: import { LoginPage } from "@client/LoginPage.tsx"
}

/* ==============================================
  ROUTES: DEBUG
============================================== */

route DebugRoute {
  path: "/debug",
  to: DebugPage
}
page DebugPage {
  authRequired: true,
  component: import { DebugPage } from "@client/debug/DebugPage.tsx"
}

route DebugItemsListRoute {
  path: "/debug/items-list",
  to: DebugItemsListPage
}
page DebugItemsListPage {
  authRequired: true,
  component: import { ItemsListPage } from "@client/debug/pages/ItemsListPage/index.tsx"
}

route DebugListItemRoute {
  path: "/debug/list-item",
  to: DebugListItemPage
}
page DebugListItemPage {
  authRequired: true,
  component: import { ListItemPage } from "@client/debug/pages/ListItemPage/index.tsx"
}

route DebugItemRoute {
  path: "/debug/item",
  to: DebugItemPage
}
page DebugItemPage {
  authRequired: true,
  component: import { ItemPage } from "@client/debug/pages/ItemPage/index.tsx"
}

route DebugCategoryRoute {
  path: "/debug/category",
  to: DebugCategoryPage
}
page DebugCategoryPage {
  authRequired: true,
  component: import { CategoryPage } from "@client/debug/pages/CategoryPage/index.tsx"
}
